<Project>
	<!-- Import the standard MSBuild targets file -->
	<!--<Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets" />-->

	<!-- Import Directory.Build.targets if it exists -->
	<Import Project="Directory.Build.targets" Condition="Exists('Directory.Build.targets')" />

	<!-- Generate asset hashes at build time for integrity verification -->
	<Target Name="GenerateAssetHashes" BeforeTargets="BeforeBuild">
		<PropertyGroup>
			<AssetHashesFile>$(MSBuildProjectDirectory)\Services\Platforms\AssetHashes.Generated.cs</AssetHashesFile>
		</PropertyGroup>

		<!-- Calculate SHA256 for each asset file -->
		<GetFileHash Files="$(MSBuildProjectDirectory)\Assets\index.html" Algorithm="SHA256">
			<Output TaskParameter="Hash" PropertyName="IndexHtmlHash" />
		</GetFileHash>
		<GetFileHash Files="$(MSBuildProjectDirectory)\Assets\mermaid.min.js" Algorithm="SHA256">
			<Output TaskParameter="Hash" PropertyName="MermaidJsHash" />
		</GetFileHash>
		<GetFileHash Files="$(MSBuildProjectDirectory)\Assets\js-yaml.min.js" Algorithm="SHA256">
			<Output TaskParameter="Hash" PropertyName="JsYamlHash" />
		</GetFileHash>
		<Message Importance="High" Text="Index.html Hash: $(IndexHtmlHash)" />
		<Message Importance="High" Text="Mermaid.min.js Hash: $(MermaidJsHash)" />
		<Message Importance="High" Text="Js-YAML.min.js Hash: $(JsYamlHash)" />

		<!-- Use a custom task to write the file properly -->
		<ItemGroup>
			<AssetHashLines Include="// &lt;auto-generated /&gt;" />
			<AssetHashLines Include="// This file is automatically generated at build time. Do not modify manually." />
			<AssetHashLines Include="// Generated: $([System.DateTime]::UtcNow.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;)) UTC" />
			<AssetHashLines Include=" " />
			<AssetHashLines Include="using System.Collections.Frozen%3B" />
			<AssetHashLines Include=" " />
			<AssetHashLines Include="namespace MermaidPad.Services.Platforms%3B" />
			<AssetHashLines Include=" " />
			<AssetHashLines Include="/// &lt;summary&gt;" />
			<AssetHashLines Include="/// Contains SHA-256 hashes of embedded assets for integrity verification." />
			<AssetHashLines Include="/// These hashes are calculated at build time from the source files." />
			<AssetHashLines Include="/// &lt;/summary&gt;" />
			<AssetHashLines Include="internal static class AssetHashes" />
			<AssetHashLines Include="{" />
			<AssetHashLines Include="    /// &lt;summary&gt;" />
			<AssetHashLines Include="    /// SHA-256 hashes of embedded assets, keyed by asset filename." />
			<AssetHashLines Include="    /// &lt;/summary&gt;" />
			<AssetHashLines Include="    internal static readonly FrozenDictionary&lt;string, string&gt; EmbeddedAssetHashes = new Dictionary&lt;string, string&gt;" />
			<AssetHashLines Include="    {" />
			<AssetHashLines Include="        [&quot;index.html&quot;] = &quot;$(IndexHtmlHash)&quot;," />
			<AssetHashLines Include="        [&quot;mermaid.min.js&quot;] = &quot;$(MermaidJsHash)&quot;," />
			<AssetHashLines Include="        [&quot;js-yaml.min.js&quot;] = &quot;$(JsYamlHash)&quot;" />
			<AssetHashLines Include="    }.ToFrozenDictionary()%3B" />
			<AssetHashLines Include=" " />
			<AssetHashLines Include="    /// &lt;summary&gt;" />
			<AssetHashLines Include="    /// Verifies if the provided hash matches the expected hash for the given asset." />
			<AssetHashLines Include="    /// &lt;/summary&gt;" />
			<AssetHashLines Include="    internal static bool VerifyHash(string assetName, string actualHash)" />
			<AssetHashLines Include="    {" />
			<AssetHashLines Include="        return EmbeddedAssetHashes.TryGetValue(assetName, out var expectedHash) &amp;&amp; " />
			<AssetHashLines Include="               string.Equals(expectedHash, actualHash, StringComparison.OrdinalIgnoreCase)%3B" />
			<AssetHashLines Include="    }" />
			<AssetHashLines Include="}" />
		</ItemGroup>

		<!-- Write the generated file -->
		<WriteLinesToFile Encoding="utf-8"
		File="$(AssetHashesFile)"
		Lines="@(AssetHashLines)"
		Overwrite="true" />

		<Message Importance="high" Text="Generated asset hashes file: $(AssetHashesFile)" />
	</Target>

	<!-- Clean up generated files -->
	<Target Name="CleanAssetHashes" BeforeTargets="Clean">
		<Delete Files="$(MSBuildProjectDirectory)\Services\Platforms\AssetHashes.Generated.cs" TreatErrorsAsWarnings="true" />
	</Target>

</Project>
