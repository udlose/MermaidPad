# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Bundle macOS .app

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      rid:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to bundle (e.g., 1.0.0)'
        required: true
        type: string
      rid:
        description: 'Runtime Identifier'
        required: true
        type: choice
        options:
          - osx-x64
          - osx-arm64

jobs:
  restrict-user:
    runs-on: ubuntu-latest
    steps:
      - name: Restrict to allowed user
        run: |
          if [ "${{ github.actor }}" != "udlose" ]; then
            echo "Only udlose can run this workflow."
            exit 1
          fi

  bundle-app:
    needs: restrict-user
    runs-on: macos-latest
    permissions:
      contents: write           # To update artifacts and create releases
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download published artifact
        uses: actions/download-artifact@v5
        with:
          name: MermaidPad-${{ inputs.version }}-${{ inputs.rid }}.zip
          path: ./publish

      - name: Unzip published files
        run: |
          unzip ./publish/MermaidPad-${{ inputs.version }}-${{ inputs.rid }}.zip -d ./publish/unpacked

      - name: Substitute version in Info.plist
        run: |
          sed "s/__VERSION__/${{ inputs.version }}/g" Info.plist.in > Info.plist

      - name: Create .app bundle structure
        run: |
          set -euo pipefail
          APPNAME="MermaidPad"

          # Create the .app bundle directory structure
          mkdir -p ./artifacts
          BUNDLE="./artifacts/$APPNAME.app"
          mkdir -p "$BUNDLE/Contents/MacOS"
          cp -a ./publish/unpacked/. "$BUNDLE/Contents/MacOS/"
          cp Info.plist "$BUNDLE/Contents/"
          cp Assets/AppIcon.icns "$BUNDLE/Contents/"
          chmod +x "$BUNDLE/Contents/MacOS/$APPNAME"

      # - name: Ad-hoc Sign .app Bundle
      #   run: |
      #     BUNDLE="./artifacts/MermaidPad.app"
      #     echo "Starting comprehensive ad-hoc signing of $BUNDLE"
      #     
      #     # Sign all dylibs and frameworks first (inside-out approach)
      #     echo "Signing dynamic libraries and frameworks..."
      #     find "$BUNDLE" -name "*.dylib" -exec codesign --force --sign - {} \; || echo "No .dylib files found"
      #     find "$BUNDLE" -name "*.framework" -exec codesign --force --sign - {} \; || echo "No .framework files found"
      #     
      #     # Sign the main executable
      #     echo "Signing main executable..."
      #     codesign --force --sign - "$BUNDLE/Contents/MacOS/MermaidPad"
      #     
      #     # Sign the entire bundle with --deep to catch anything we missed
      #     echo "Signing entire .app bundle..."
      #     codesign --force --deep --sign - "$BUNDLE"
      #     
      #     # Verify the signing worked
      #     echo "Verifying signatures..."
      #     codesign --verify --deep --strict --verbose=2 "$BUNDLE" || {
      #       echo "ERROR: Signature verification failed"
      #       exit 1
      #     }
      #     
      #     # Check Gatekeeper assessment (what users will experience)
      #     echo "Testing Gatekeeper assessment..."
      #     spctl --assess --type execute --verbose "$BUNDLE" || {
      #       echo "Gatekeeper assessment failed (expected for ad-hoc signed apps)"
      #       echo "   Users will need to right-click -> Open on first launch"
      #     }
      #     
      #     # Clear any quarantine attributes
      #     echo "Clearing quarantine attributes..."
      #     xattr -cr "$BUNDLE" || echo "No quarantine attributes to clear"
      #     
      #     # List final app structure for debugging
      #     echo "Final app bundle structure:"
      #     find "$BUNDLE" -type f | head -100
      #     echo "   ... (showing first 100 files)"
      #
      #     echo "Success: Ad-hoc signing completed successfully!"

      # REMOVE REDUNDANCIES
      # - name: List .app bundle contents
      #   run: |
      #     find ./artifacts/MermaidPad.app

      # # Upload the .app bundle immediately after creation
      # - name: Upload .app bundle artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: MermaidPad-${{ inputs.version }}-${{ inputs.rid }}.app
      #     path: ./artifacts/MermaidPad.app

      # # Download the .app bundle artifact for zipping and release
      # - name: Download .app bundle artifact
      #   uses: actions/download-artifact@v5
      #   with:
      #     name: MermaidPad-${{ inputs.version }}-${{ inputs.rid }}.app
      #     path: ./artifacts

      # List contents of ./artifacts
      - name: List contents of ./artifacts
        run: |
          echo "Contents of ./artifacts using ls -R:"
          ls -R ./artifacts

      # Ensure main binary is executable before zipping
      - name: Ensure main binary is executable
        run: |
          if [ ! -d "./artifacts/MermaidPad.app" ]; then
            echo "ERROR: ./artifacts/MermaidPad.app does not exist."
            exit 1
          fi
          find ./artifacts/MermaidPad.app -type f -name "MermaidPad" -exec chmod +x {} \;

      # Zip the .app bundle for release
      - name: Zip .app bundle for release
        shell: bash
        run: |
          set -euo pipefail

          # Create macOS-friendly zip (preserves metadata, no __MACOSX)
          ZIP_NAME="MermaidPad-${{ inputs.version }}-${{ inputs.rid }}.app.zip"
          if [ ! -d "./artifacts/MermaidPad.app" ]; then
            echo "ERROR: ./artifacts/MermaidPad.app does not exist."
            exit 1
          fi
          ditto -c -k --sequesterRsrc --keepParent ./artifacts/MermaidPad.app "$ZIP_NAME"
          echo "Success: Created app bundle zip: $ZIP_NAME"

      # Upload the zipped .app bundle as the artifact
      - name: Upload .app bundle zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: MermaidPad-${{ inputs.version }}-${{ inputs.rid }}.app.zip
          path: MermaidPad-${{ inputs.version }}-${{ inputs.rid }}.app.zip
