# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build and Release

on:
  push:
    tags:
      - 'v*'            # Triggers on version tags like v1.0.0
  workflow_dispatch:    # Allows manual triggering
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      is_preview:
        description: 'Mark this release as a preview (pre-release)?'
        required: false
        default: false
        type: boolean

jobs:
  restrict-user:
    runs-on: ubuntu-latest
    steps:
      - name: Restrict to allowed user
        run: |
          if [ "${{ github.actor }}" != "udlose" ]; then
            echo "Only udlose can run this workflow."
            exit 1
          fi

  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Extract version
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tag push: extract from tag
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual run: use input
            VERSION="${{ github.event.inputs.version }}"
          else
            # Fallback
            VERSION="dev-$(date +'%Y%m%d-%H%M%S')"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  # Build matrix for all platforms
  build:
    name: Build (${{ matrix.name }})
    needs: [restrict-user, get-version]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Windows x64
            os: windows-latest
            rid: win-x64
            extension: .exe
          - name: Windows ARM64
            os: windows-latest
            rid: win-arm64
            extension: .exe
          - name: Linux x64
            os: ubuntu-latest
            rid: linux-x64
            extension: ''
          - name: Linux ARM64
            os: ubuntu-latest
            rid: linux-arm64
            extension: ''
          - name: macOS x64
            os: macos-latest
            rid: osx-x64
            extension: ''
          - name: macOS ARM64
            os: macos-latest
            rid: osx-arm64
            extension: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore MermaidPad.csproj

      - name: Publish
        run: dotnet publish MermaidPad.csproj -c Release -r ${{ matrix.rid }} -o ./publish -p:Version=${{ needs.get-version.outputs.version }} -p:AssemblyVersion=${{ needs.get-version.outputs.version }} -p:FileVersion=${{ needs.get-version.outputs.version }}
      
      # Add ad-hoc code signing for macOS binaries
      - name: Ad-hoc Sign macOS Binary
        if: matrix.rid == 'osx-x64' || matrix.rid == 'osx-arm64'
        shell: bash
        working-directory: ./publish
        run: |
          BIN_NAME="MermaidPad${{ matrix.extension }}"
          echo "Ad-hoc signing macOS binary: $BIN_NAME"
          
          # Ad-hoc sign the main executable
          codesign --force --sign - "$BIN_NAME"
          
          # Verify the signing worked
          codesign --verify --verbose "$BIN_NAME"
          echo "Success: Ad-hoc signing completed for $BIN_NAME"
          
          # Also sign any .dylib files if they exist
          if ls *.dylib 1> /dev/null 2>&1; then
            echo "Found .dylib files, signing them too..."
            for dylib in *.dylib; do
              echo "Signing: $dylib"
              codesign --force --sign - "$dylib"
              codesign --verify --verbose "$dylib"
            done
          fi
          
          # Clear any quarantine attributes that might have been set
          xattr -cr . || echo "No quarantine attributes to clear"
          
          echo "Success: All macOS binaries have been ad-hoc signed"

      - name: Prepare artifact
        shell: bash
        working-directory: ./publish
        run: |
          ZIP_NAME="MermaidPad-${{ needs.get-version.outputs.version }}-${{ matrix.rid }}.zip"
          BIN_NAME="MermaidPad${{ matrix.extension }}"
          if [ "${{ matrix.extension }}" != ".exe" ]; then
            chmod +x "$BIN_NAME"
            zip -r "$ZIP_NAME" ./*
          else
            powershell.exe -Command "Compress-Archive -Path * -DestinationPath $ZIP_NAME"
          fi
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ./publish/${{ env.ZIP_NAME }}
          if-no-files-found: error

  # Create GitHub release
  release:
    name: Create Release
    needs: [restrict-user, get-version, build]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.version != '')
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: github.event_name == 'workflow_dispatch'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create or update tag for manual runs
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f v${{ needs.get-version.outputs.version }}
          git push origin v${{ needs.get-version.outputs.version }} --force-with-lease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.get-version.outputs.version }}
          name: MermaidPad v${{ needs.get-version.outputs.version }}
          artifacts: "./artifacts/**/*"
          generateReleaseNotes: true
          allowUpdates: true
          prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.is_preview == 'true' }}
          body: |
            ## MermaidPad v${{ needs.get-version.outputs.version }}

            ### Requirements
            - .NET 9 Runtime ([Download here](https://dotnet.microsoft.com/download/dotnet/9.0))
            - Windows: WebView2 Runtime ([Download here](https://developer.microsoft.com/en-us/microsoft-edge/webview2/?form=MA13LH#download))
            - Linux: libwebkit2gtk-4.0-37+ (for WebKit support)
            - macOS: WebKit (included on macOS by default - [Download](https://webkit.org/downloads/))

            ### macOS Installation Notes
            **Important**: macOS binaries are ad-hoc signed. On first launch:
            1. Right-click the app -> **"Open"** (not double-click)
            2. Click **"Open"** when prompted about unidentified developer
            3. OR via terminal: `xattr -cr MermaidPad-*-osx-* && ./MermaidPad-*-osx-*`

            ### Downloads
            Choose the appropriate version for your platform:

            - #### Windows:
              - `x64`: `MermaidPad-${{ needs.get-version.outputs.version }}-win-x64.exe`
              - `arm64`: `MermaidPad-${{ needs.get-version.outputs.version }}-win-arm64.exe`

            - #### Linux:
              - `x64`: `MermaidPad-${{ needs.get-version.outputs.version }}-linux-x64`
              - `arm64`: `MermaidPad-${{ needs.get-version.outputs.version }}-linux-arm64`

            - #### MacOS:
  
              Not sure which one?
              If you have an:
              - Apple M1/M2/M3 = Apple Silicon `arm64`
              - Intel = Intel Mac `x64`

              Both architectures are supported on MacOS, but you should choose download for your native CPU Architecture:
              - Intel (`x64`): `MermaidPad-${{ needs.get-version.outputs.version }}-osx-x64`
              - Apple Silicon (`arm64`): `MermaidPad-${{ needs.get-version.outputs.version }}-osx-arm64`

            ### Installation
            1. Download the appropriate file for your platform
            2. Make executable (Linux/macOS): `chmod +x MermaidPad-*`
            3. Run directly: `./MermaidPad-*` or double-click (on Windows)

  bundle-macos-app:
    name: Bundle macOS .app
    needs: [restrict-user, get-version, build]
    strategy:
      matrix:
        include:
          - rid: osx-x64
          - rid: osx-arm64
    uses: ./.github/workflows/macos-bundle.yml
    with:
      version: ${{ needs.get-version.outputs.version }}
      rid: ${{ matrix.rid }}
    permissions:
      contents: write

  # Create Universal DMG for macOS
  create-universal-dmg:
    name: Create Universal macOS DMG
    needs: [restrict-user, get-version, build]
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Download the .app bundle artifacts (these contain the proper app structure)
      - name: Download macOS x64 app bundle
        uses: actions/download-artifact@v4
        with:
          name: MermaidPad-${{ needs.get-version.outputs.version }}-osx-x64.app
          path: ./artifacts/x64-app

      - name: Download macOS ARM64 app bundle  
        uses: actions/download-artifact@v4
        with:
          name: MermaidPad-${{ needs.get-version.outputs.version }}-osx-arm64.app
          path: ./artifacts/arm64-app

      - name: Verify downloaded app bundles
        run: |
          echo "Downloaded app bundles:"
          ls -la ./artifacts/x64-app/
          ls -la ./artifacts/arm64-app/
          
          echo "App bundle contents:"
          find ./artifacts/x64-app/ -name "*.app" -exec ls -la {} \;
          find ./artifacts/arm64-app/ -name "*.app" -exec ls -la {} \;

      - name: Create Universal Binary
        run: |
          # Find the .app bundles in the downloaded artifacts
          X64_APP=$(find ./artifacts/x64-app -name "*.app" -type d | head -1)
          ARM64_APP=$(find ./artifacts/arm64-app -name "*.app" -type d | head -1)
          
          echo "X64 app bundle: $X64_APP"
          echo "ARM64 app bundle: $ARM64_APP"
          
          if [ -z "$X64_APP" ] || [ -z "$ARM64_APP" ]; then
            echo "Could not find app bundles"
            exit 1
          fi
          
          # Create the universal app bundle by copying the x64 structure
          mkdir -p "./universal"
          cp -r "$X64_APP" "./universal/MermaidPad.app"
          
          # Verify we have the binaries
          X64_BINARY="$X64_APP/Contents/MacOS/MermaidPad"
          ARM64_BINARY="$ARM64_APP/Contents/MacOS/MermaidPad"
          
          echo "X64 binary: $X64_BINARY"
          echo "ARM64 binary: $ARM64_BINARY"
          
          if [ ! -f "$X64_BINARY" ] || [ ! -f "$ARM64_BINARY" ]; then
            echo "Could not find binaries in app bundles"
            echo "X64 contents:"
            ls -la "$X64_APP/Contents/MacOS/"
            echo "ARM64 contents:"
            ls -la "$ARM64_APP/Contents/MacOS/"
            exit 1
          fi
          
          # Create universal binary using lipo
          lipo -create \
            "$X64_BINARY" \
            "$ARM64_BINARY" \
            -output ./universal/MermaidPad.app/Contents/MacOS/MermaidPad
          
          # Verify the universal binary
          echo "Universal binary info:"
          lipo -info ./universal/MermaidPad.app/Contents/MacOS/MermaidPad
          
          # Make sure it's executable
          chmod +x ./universal/MermaidPad.app/Contents/MacOS/MermaidPad
          
          echo "Universal app bundle structure:"
          ls -la ./universal/MermaidPad.app/Contents/

      - name: Install create-dmg
        run: |
          brew install create-dmg

      - name: Create DMG
        run: |
          # Create a staging directory for DMG contents
          mkdir -p ./dmg-staging
          cp -r ./universal/MermaidPad.app ./dmg-staging/
          
          # Create the DMG with professional layout
          create-dmg \
            --volname "MermaidPad" \
            --volicon "./Assets/AppIcon.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "MermaidPad.app" 200 190 \
            --hide-extension "MermaidPad.app" \
            --app-drop-link 600 185 \
            --disk-image-size 200 \
            --format UDZO \
            "MermaidPad-${{ needs.get-version.outputs.version }}-universal.dmg" \
            "./dmg-staging"

      - name: Verify DMG
        run: |
          # Basic verification
          ls -la MermaidPad-${{ needs.get-version.outputs.version }}-universal.dmg
          echo "DMG file size: $(du -h MermaidPad-${{ needs.get-version.outputs.version }}-universal.dmg)"

      - name: Upload Universal DMG to Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.get-version.outputs.version }}
          artifacts: "MermaidPad-${{ needs.get-version.outputs.version }}-universal.dmg"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
