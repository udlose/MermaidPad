name: Build and Release

on:
  push:
    tags:
      - 'v*'            # Triggers on version tags like v1.0.0
  workflow_dispatch:    # Allows manual triggering
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      is_preview:
        description: 'Mark this release as a preview (pre-release)?'
        required: false
        default: false
        type: boolean

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Extract version
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tag push: extract from tag
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual run: use input
            VERSION="${{ github.event.inputs.version }}"
          else
            # Fallback
            VERSION="dev-$(date +'%Y%m%d-%H%M%S')"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  # Build matrix for all platforms
  build:
    name: Build (${{ matrix.name }})
    needs: get-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Windows x64
            os: windows-latest
            rid: win-x64
            extension: .exe
          - name: Windows ARM64
            os: windows-latest
            rid: win-arm64
            extension: .exe
          - name: Linux x64
            os: ubuntu-latest
            rid: linux-x64
            extension: ''
          - name: Linux ARM64
            os: ubuntu-latest
            rid: linux-arm64
            extension: ''
          - name: macOS x64
            os: macos-latest
            rid: osx-x64
            extension: ''
          - name: macOS ARM64
            os: macos-latest
            rid: osx-arm64
            extension: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Restore dependencies
        run: dotnet restore MermaidPad.csproj

      - name: Publish
        run: dotnet publish MermaidPad.csproj -c Release -r ${{ matrix.rid }} -o ./publish -p:Version=${{ needs.get-version.outputs.version }} -p:AssemblyVersion=${{ needs.get-version.outputs.version }} -p:FileVersion=${{ needs.get-version.outputs.version }}
      
      - name: Verify Assets
        shell: bash
        run: |
          echo "Verifying published assets for ${{ matrix.name }}..."
      
          # Define asset paths (works on all platforms with bash)
          ASSETS_DIR="./publish/Assets"
          INDEX_FILE="$ASSETS_DIR/index.html"
          MERMAID_FILE="$ASSETS_DIR/mermaid.min.js"
      
          # Check if Assets directory exists
          if [ ! -d "$ASSETS_DIR" ]; then
            echo "ERROR: Assets directory missing: $ASSETS_DIR"
            exit 1
          fi
      
          # Check for required files
          if [ ! -f "$INDEX_FILE" ]; then
            echo "ERROR: index.html missing from publish directory"
            echo "Expected at: $INDEX_FILE"
            exit 1
          fi
      
          if [ ! -f "$MERMAID_FILE" ]; then
            echo "ERROR: mermaid.min.js missing from publish directory"
            echo "Expected at: $MERMAID_FILE"
            exit 1
          fi
      
          echo "SUCCESS: Assets verification passed for ${{ matrix.name }}"
          echo "Assets found:"
      
          # Use portable commands for listing (works on Windows/Linux/macOS)
          if command -v ls >/dev/null 2>&1; then
            ls -la "$ASSETS_DIR/" 2>/dev/null
          ls -la "$ASSETS_DIR/" 2>/dev/null || echo "Could not list with ls -la..."
  
      - name: Prepare artifact
        shell: bash
        working-directory: ./publish
        run: |
          if [ "${{ matrix.extension }}" = ".exe" ]; then
            mv MermaidPad.exe MermaidPad-${{ needs.get-version.outputs.version }}-${{ matrix.rid }}.exe
            ARTIFACT_NAME="MermaidPad-${{ needs.get-version.outputs.version }}-${{ matrix.rid }}.exe"
          else
            mv MermaidPad MermaidPad-${{ needs.get-version.outputs.version }}-${{ matrix.rid }}
            chmod +x MermaidPad-${{ needs.get-version.outputs.version }}-${{ matrix.rid }}
            ARTIFACT_NAME="MermaidPad-${{ needs.get-version.outputs.version }}-${{ matrix.rid }}"
          fi
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./publish/${{ env.ARTIFACT_NAME }}
          if-no-files-found: error

  # Create GitHub release
  release:
    name: Create Release
    needs: [get-version, build]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.version != '')
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: github.event_name == 'workflow_dispatch'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create or update tag for manual runs
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f v${{ needs.get-version.outputs.version }}
          git push origin v${{ needs.get-version.outputs.version }} --force-with-lease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.get-version.outputs.version }}
          name: MermaidPad v${{ needs.get-version.outputs.version }}
          artifacts: "./artifacts/**/*"
          generateReleaseNotes: true
          allowUpdates: true
          prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.is_preview == 'true' }}
          body: |
            ## MermaidPad v${{ needs.get-version.outputs.version }}

            ### Requirements
            - .NET 9 Runtime ([Download here](https://dotnet.microsoft.com/download/dotnet/9.0))

            ### Downloads
            Choose the appropriate version for your platform:
            - **Windows x64**: `MermaidPad-${{ needs.get-version.outputs.version }}-win-x64.exe`
            - **Windows ARM64**: `MermaidPad-${{ needs.get-version.outputs.version }}-win-arm64.exe`
            - **Linux x64**: `MermaidPad-${{ needs.get-version.outputs.version }}-linux-x64`
            - **Linux ARM64**: `MermaidPad-${{ needs.get-version.outputs.version }}-linux-arm64`
            - **macOS Intel**: `MermaidPad-${{ needs.get-version.outputs.version }}-osx-x64`
            - **macOS Apple Silicon**: `MermaidPad-${{ needs.get-version.outputs.version }}-osx-arm64`

            ### Installation
            1. Download the appropriate file for your platform
            2. Make executable (Linux/macOS): `chmod +x MermaidPad-*`
            3. Run directly: `./MermaidPad-*` or double-click on Windows
